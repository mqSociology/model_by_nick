# Chunk 13
#    95 percent confidence interval: 0.8891745 1.2493867
# Chunk 14
t.test(elect_2013$election_tv,
elect_2013$election_newspaper,
paired = TRUE)
# Chunk 15
mean(elect_2013$election_tv, na.rm = TRUE)
# Chunk 16
mean(elect_2013$election_newspaper, na.rm = TRUE)
# Chunk 17
install.packages("Hmisc",
repos = 'http://cran.rstudio.com')
# hash this out after installing on your computer
install.packages("xtable",
repos = 'http://cran.rstudio.com')
# and this.
library(xtable)
library(Hmisc)
# Chunk 18
cor.test(elect_2013$rural_urban,
elect_2013$likelihood_vote)
# Chunk 19
# Pearson's product-moment correlation
# data:  elect_2013$rural_urban and elect_2013$likelihood_vote
# t = 1.3682, df = 3801, p-value = 0.1713
# alternative hypothesis: true correlation is not equal to 0
# 95 percent confidence interval:
# -0.009604256  0.053932694
# sample estimates:
# cor
# 0.02218662
# Chunk 20
cor.test(elect_2013$highest_qual,
elect_2013$likelihood_vote)
# Chunk 21
cor.test(elect_2013$internet_skills, elect_2013$likelihood_vote)
# Chunk 22
cor.test(elect_2013$pol_knowledge, elect_2013$likelihood_vote)
# Chunk 23
cor.test(elect_2013$interest_pol, elect_2013$likelihood_vote)
# Chunk 24
corstars <-function(x, method=c("pearson", "spearman"),
removeTriangle=c("upper", "lower"),
result=c("none", "html", "latex")){
# SOURCES:
# * http://www.sthda.com/english/wiki/elegant-correlation-table-using-xtable-r-package
# * http://myowelt.blogspot.com/2008/04/beautiful-correlation-tables-in-r.html
# * https://stat.ethz.ch/pipermail/r-help/2008-March/156583.html
#Compute correlation matrix
require(Hmisc)
x <- as.matrix(x)
correlation_matrix<-rcorr(x, type=method[1])
R <- correlation_matrix$r
# Matrix of correlation coeficients
p <- correlation_matrix$P
# Matrix of p-value
## Define notions for significance levels; spacing is important.
mystars <- ifelse(p < .0001, "****",
ifelse(p < .001, "*** ",
ifelse(p < .01, "** ",
ifelse(p < .05, "*  ", "    "))))
## trunctuate the correlation matrix to two decimal
R <- format(round(cbind(rep(-1.11,
ncol(x)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
Rnew <- matrix(paste(R, mystars, sep=""), ncol=ncol(x))
diag(Rnew) <- paste(diag(R), " ", sep="")
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep="")
## remove upper triangle of correlation matrix
if(removeTriangle[1]=="upper"){
Rnew <- as.matrix(Rnew)
Rnew[upper.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
}
## remove lower triangle of correlation matrix
else if(removeTriangle[1]=="lower"){
Rnew <- as.matrix(Rnew)
Rnew[lower.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
}
## remove last column and return the correlation matrix
Rnew <- cbind(Rnew[1:length(Rnew)-1])
if (result[1]=="none") return(Rnew)
else{
if(result[1]=="html") print(xtable(Rnew), type="html")
else print(xtable(Rnew), type="latex")
}
}
# Chunk 2
install.packages("summarytools",
repos = 'http://cran.rstudio.com')  # install the package (once, and then # it out)
library(summarytools) # load the library
# Chunk 3
elect_2013 <- read.csv("elect_2013.csv")  # loads dataset
# Chunk 4
elect_2013 <- elect_2013[,2:ncol(elect_2013)]
# Chunk 5
print(ctable(elect_2013$pol_knowledge,
elect_2013$likelihood_vote),
method = 'rmarkdown')
# Chunk 6
print(ctable(elect_2013$pol_knowledge,
elect_2013$likelihood_vote,
prop = "c"),
method = 'rmarkdown', footnote = NA)
# Chunk 7
print(ctable(elect_2013$pol_knowledge,
elect_2013$likelihood_vote,
prop = "t"),
method = 'rmarkdown', footnote = NA)
# Chunk 8
print(ctable(elect_2013$pol_knowledge,
elect_2013$likelihood_vote,
prop = "n"),
method = 'rmarkdown', footnote = NA)
# Chunk 9
print(ctable(elect_2013$pol_knowledge,
elect_2013$likelihood_vote,
omit.headings = TRUE,
totals = FALSE,
useNA = "no",
prop = "n"),
method = 'rmarkdown', footnote = NA)
# Chunk 10
t.test(elect_2013$pol_knowledge ~ elect_2013$female)
# Chunk 11
# Welch Two Sample t-test  data:  elect_2013$pol_knowledge by elect_2013$female t = 11.64, df = 3838.6, p-value < 2.2e-16 alternative hypothesis: true difference in means is not equal to 0 95 percent confidence interval: 0.8891745 1.2493867
#     sample estimates:
#     mean in group 0 mean in group 1
#           5.328302        4.259021
#     >
# Chunk 12
# sample estimates:
# mean in group 0 mean in group 1
#       5.328302        4.259021
# Chunk 13
#    95 percent confidence interval: 0.8891745 1.2493867
# Chunk 14
t.test(elect_2013$election_tv,
elect_2013$election_newspaper,
paired = TRUE)
# Chunk 15
mean(elect_2013$election_tv, na.rm = TRUE)
# Chunk 16
mean(elect_2013$election_newspaper, na.rm = TRUE)
install.packages("summarytools", repos = "http://cran.rstudio.com")
blogdown::stop_server()
# Chunk 2
install.packages("summarytools",
repos = 'http://cran.rstudio.com')  # install the package (once, and then # it out)
library(summarytools) # load the library
# Chunk 3
elect_2013 <- read.csv("elect_2013.csv")  # loads dataset
# Chunk 4
elect_2013 <- elect_2013[,2:ncol(elect_2013)]
# Chunk 5
print(ctable(elect_2013$pol_knowledge,
elect_2013$likelihood_vote),
method = 'rmarkdown')
# Chunk 6
print(ctable(elect_2013$pol_knowledge,
elect_2013$likelihood_vote,
prop = "c"),
method = 'rmarkdown', footnote = NA)
# Chunk 7
print(ctable(elect_2013$pol_knowledge,
elect_2013$likelihood_vote,
prop = "t"),
method = 'rmarkdown', footnote = NA)
# Chunk 8
print(ctable(elect_2013$pol_knowledge,
elect_2013$likelihood_vote,
prop = "n"),
method = 'rmarkdown', footnote = NA)
# Chunk 9
print(ctable(elect_2013$pol_knowledge,
elect_2013$likelihood_vote,
omit.headings = TRUE,
totals = FALSE,
useNA = "no",
prop = "n"),
method = 'rmarkdown', footnote = NA)
# Chunk 10
t.test(elect_2013$pol_knowledge ~ elect_2013$female)
# Chunk 11
# Welch Two Sample t-test  data:  elect_2013$pol_knowledge by elect_2013$female t = 11.64, df = 3838.6, p-value < 2.2e-16 alternative hypothesis: true difference in means is not equal to 0 95 percent confidence interval: 0.8891745 1.2493867
#     sample estimates:
#     mean in group 0 mean in group 1
#           5.328302        4.259021
#     >
# Chunk 12
# sample estimates:
# mean in group 0 mean in group 1
#       5.328302        4.259021
# Chunk 13
#    95 percent confidence interval: 0.8891745 1.2493867
# Chunk 14
t.test(elect_2013$election_tv,
elect_2013$election_newspaper,
paired = TRUE)
# Chunk 15
mean(elect_2013$election_tv, na.rm = TRUE)
# Chunk 16
mean(elect_2013$election_newspaper, na.rm = TRUE)
install.packages("summarytools", repos = "http://cran.rstudio.com")
install.packages("Hmisc", repos = 'http://cran.rstudio.com')
# hash this out after installing on your computer
install.packages("xtable", repos = 'http://cran.rstudio.com')
# and this.
library(xtable)
library(Hmisc)
install.packages("Hmisc", repos = "http://cran.rstudio.com")
install.packages("Hmisc", repos = 'http://cran.rstudio.com')
# hash this out after installing on your computer
install.packages("xtable", repos = 'http://cran.rstudio.com')
# and this.
library(xtable)
library(Hmisc)
install.packages("Hmisc", repos = "http://cran.rstudio.com")
install.packages("xtable", repos = "http://cran.rstudio.com")
blogdown::serve_site()
.libPaths()
.libPaths(c(.libPaths()))
blogdown::serve_site()
blogdown::serve_site()
x<-.libPaths
x<-.libPaths()
x
x[1]
blogdown::serve_site()
.libPaths()
blogdown::serve_site()
.libPaths()
# Chunk 2
install.packages("summarytools",
repos = 'http://cran.rstudio.com')  # install the package (once, and then # it out)
library(summarytools) # load the library
# Chunk 3
elect_2013 <- read.csv("elect_2013.csv")  # loads dataset
# Chunk 4
elect_2013 <- elect_2013[,2:ncol(elect_2013)]
# Chunk 5
print(ctable(elect_2013$pol_knowledge,
elect_2013$likelihood_vote),
method = 'rmarkdown')
# Chunk 6
print(ctable(elect_2013$pol_knowledge,
elect_2013$likelihood_vote,
prop = "c"),
method = 'rmarkdown', footnote = NA)
# Chunk 7
print(ctable(elect_2013$pol_knowledge,
elect_2013$likelihood_vote,
prop = "t"),
method = 'rmarkdown', footnote = NA)
# Chunk 8
print(ctable(elect_2013$pol_knowledge,
elect_2013$likelihood_vote,
prop = "n"),
method = 'rmarkdown', footnote = NA)
# Chunk 9
print(ctable(elect_2013$pol_knowledge,
elect_2013$likelihood_vote,
omit.headings = TRUE,
totals = FALSE,
useNA = "no",
prop = "n"),
method = 'rmarkdown', footnote = NA)
# Chunk 10
t.test(elect_2013$pol_knowledge ~ elect_2013$female)
# Chunk 11
# Welch Two Sample t-test  data:  elect_2013$pol_knowledge by elect_2013$female t = 11.64, df = 3838.6, p-value < 2.2e-16 alternative hypothesis: true difference in means is not equal to 0 95 percent confidence interval: 0.8891745 1.2493867
#     sample estimates:
#     mean in group 0 mean in group 1
#           5.328302        4.259021
#     >
# Chunk 12
# sample estimates:
# mean in group 0 mean in group 1
#       5.328302        4.259021
# Chunk 13
#    95 percent confidence interval: 0.8891745 1.2493867
# Chunk 14
t.test(elect_2013$election_tv,
elect_2013$election_newspaper,
paired = TRUE)
# Chunk 15
mean(elect_2013$election_tv, na.rm = TRUE)
# Chunk 16
mean(elect_2013$election_newspaper, na.rm = TRUE)
# Chunk 17
install.packages("Hmisc", repos = 'http://cran.rstudio.com')
# hash this out after installing on your computer
install.packages("xtable", repos = 'http://cran.rstudio.com')
# and this.
library(xtable)
library(Hmisc)
# Chunk 18
cor.test(elect_2013$rural_urban,
elect_2013$likelihood_vote)
# Chunk 19
# Pearson's product-moment correlation
# data:  elect_2013$rural_urban and elect_2013$likelihood_vote
# t = 1.3682, df = 3801, p-value = 0.1713
# alternative hypothesis: true correlation is not equal to 0
# 95 percent confidence interval:
# -0.009604256  0.053932694
# sample estimates:
# cor
# 0.02218662
# Chunk 20
cor.test(elect_2013$highest_qual,
elect_2013$likelihood_vote)
# Chunk 21
cor.test(elect_2013$internet_skills, elect_2013$likelihood_vote)
# Chunk 22
cor.test(elect_2013$pol_knowledge, elect_2013$likelihood_vote)
# Chunk 23
cor.test(elect_2013$interest_pol, elect_2013$likelihood_vote)
# Chunk 24
corstars <-function(x, method=c("pearson", "spearman"),
removeTriangle=c("upper", "lower"),
result=c("none", "html", "latex")){
# SOURCES:
# * http://www.sthda.com/english/wiki/elegant-correlation-table-using-xtable-r-package
# * http://myowelt.blogspot.com/2008/04/beautiful-correlation-tables-in-r.html
# * https://stat.ethz.ch/pipermail/r-help/2008-March/156583.html
#Compute correlation matrix
require(Hmisc)
x <- as.matrix(x)
correlation_matrix<-rcorr(x, type=method[1])
R <- correlation_matrix$r
# Matrix of correlation coeficients
p <- correlation_matrix$P
# Matrix of p-value
## Define notions for significance levels; spacing is important.
mystars <- ifelse(p < .0001, "****",
ifelse(p < .001, "*** ",
ifelse(p < .01, "** ",
ifelse(p < .05, "*  ", "    "))))
## trunctuate the correlation matrix to two decimal
R <- format(round(cbind(rep(-1.11,
ncol(x)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
Rnew <- matrix(paste(R, mystars, sep=""), ncol=ncol(x))
diag(Rnew) <- paste(diag(R), " ", sep="")
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep="")
## remove upper triangle of correlation matrix
if(removeTriangle[1]=="upper"){
Rnew <- as.matrix(Rnew)
Rnew[upper.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
}
## remove lower triangle of correlation matrix
else if(removeTriangle[1]=="lower"){
Rnew <- as.matrix(Rnew)
Rnew[lower.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
}
## remove last column and return the correlation matrix
Rnew <- cbind(Rnew[1:length(Rnew)-1])
if (result[1]=="none") return(Rnew)
else{
if(result[1]=="html") print(xtable(Rnew), type="html")
else print(xtable(Rnew), type="latex")
}
}
kable(print(xtable(corstars(elect_2013))))
library(knitr)
kable(print(xtable(corstars(elect_2013))))
# Chunk 2
install.packages("summarytools",
repos = 'http://cran.rstudio.com')  # install the package (once, and then # it out)
library(summarytools) # load the library
# Chunk 3
elect_2013 <- read.csv("elect_2013.csv")  # loads dataset
# Chunk 4
elect_2013 <- elect_2013[,2:ncol(elect_2013)]
# Chunk 5
print(ctable(elect_2013$pol_knowledge,
elect_2013$likelihood_vote),
method = 'rmarkdown')
# Chunk 6
print(ctable(elect_2013$pol_knowledge,
elect_2013$likelihood_vote,
prop = "c"),
method = 'rmarkdown', footnote = NA)
# Chunk 7
print(ctable(elect_2013$pol_knowledge,
elect_2013$likelihood_vote,
prop = "t"),
method = 'rmarkdown', footnote = NA)
# Chunk 8
print(ctable(elect_2013$pol_knowledge,
elect_2013$likelihood_vote,
prop = "n"),
method = 'rmarkdown', footnote = NA)
# Chunk 9
print(ctable(elect_2013$pol_knowledge,
elect_2013$likelihood_vote,
omit.headings = TRUE,
totals = FALSE,
useNA = "no",
prop = "n"),
method = 'rmarkdown', footnote = NA)
# Chunk 10
t.test(elect_2013$pol_knowledge ~ elect_2013$female)
# Chunk 11
# Welch Two Sample t-test  data:  elect_2013$pol_knowledge by elect_2013$female t = 11.64, df = 3838.6, p-value < 2.2e-16 alternative hypothesis: true difference in means is not equal to 0 95 percent confidence interval: 0.8891745 1.2493867
#     sample estimates:
#     mean in group 0 mean in group 1
#           5.328302        4.259021
#     >
# Chunk 12
# sample estimates:
# mean in group 0 mean in group 1
#       5.328302        4.259021
# Chunk 13
#    95 percent confidence interval: 0.8891745 1.2493867
# Chunk 14
t.test(elect_2013$election_tv,
elect_2013$election_newspaper,
paired = TRUE)
# Chunk 15
mean(elect_2013$election_tv, na.rm = TRUE)
# Chunk 16
mean(elect_2013$election_newspaper, na.rm = TRUE)
# Chunk 17
install.packages("Hmisc", repos = 'http://cran.rstudio.com')
# hash this out after installing on your computer
install.packages("xtable", repos = 'http://cran.rstudio.com')
# and this.
library(xtable)
library(Hmisc)
# Chunk 18
cor.test(elect_2013$rural_urban,
elect_2013$likelihood_vote)
# Chunk 19
# Pearson's product-moment correlation
# data:  elect_2013$rural_urban and elect_2013$likelihood_vote
# t = 1.3682, df = 3801, p-value = 0.1713
# alternative hypothesis: true correlation is not equal to 0
# 95 percent confidence interval:
# -0.009604256  0.053932694
# sample estimates:
# cor
# 0.02218662
# Chunk 20
cor.test(elect_2013$highest_qual,
elect_2013$likelihood_vote)
# Chunk 21
cor.test(elect_2013$internet_skills, elect_2013$likelihood_vote)
# Chunk 22
cor.test(elect_2013$pol_knowledge, elect_2013$likelihood_vote)
# Chunk 23
cor.test(elect_2013$interest_pol, elect_2013$likelihood_vote)
# Chunk 24
corstars <-function(x, method=c("pearson", "spearman"),
removeTriangle=c("upper", "lower"),
result=c("none", "html", "latex")){
# SOURCES:
# * http://www.sthda.com/english/wiki/elegant-correlation-table-using-xtable-r-package
# * http://myowelt.blogspot.com/2008/04/beautiful-correlation-tables-in-r.html
# * https://stat.ethz.ch/pipermail/r-help/2008-March/156583.html
#Compute correlation matrix
require(Hmisc)
x <- as.matrix(x)
correlation_matrix<-rcorr(x, type=method[1])
R <- correlation_matrix$r
# Matrix of correlation coeficients
p <- correlation_matrix$P
# Matrix of p-value
## Define notions for significance levels; spacing is important.
mystars <- ifelse(p < .0001, "****",
ifelse(p < .001, "*** ",
ifelse(p < .01, "** ",
ifelse(p < .05, "*  ", "    "))))
## trunctuate the correlation matrix to two decimal
R <- format(round(cbind(rep(-1.11,
ncol(x)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
Rnew <- matrix(paste(R, mystars, sep=""), ncol=ncol(x))
diag(Rnew) <- paste(diag(R), " ", sep="")
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep="")
## remove upper triangle of correlation matrix
if(removeTriangle[1]=="upper"){
Rnew <- as.matrix(Rnew)
Rnew[upper.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
}
## remove lower triangle of correlation matrix
else if(removeTriangle[1]=="lower"){
Rnew <- as.matrix(Rnew)
Rnew[lower.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
}
## remove last column and return the correlation matrix
Rnew <- cbind(Rnew[1:length(Rnew)-1])
if (result[1]=="none") return(Rnew)
else{
if(result[1]=="html") print(xtable(Rnew), type="html")
else print(xtable(Rnew), type="latex")
}
}
install.packages("summarytools", repos = "http://cran.rstudio.com")
install.packages("Hmisc", repos = "http://cran.rstudio.com")
install.packages("xtable", repos = "http://cran.rstudio.com")
kable(print(xtable(corstars(elect_2013))))
